{
  "results": {
    "arc_challenge_rag": {
      "alias": "arc_challenge_rag",
      "acc,none": 0.4274744027303754,
      "acc_stderr,none": 0.014456862944650652,
      "acc_norm,none": 0.447098976109215,
      "acc_norm_stderr,none": 0.014529380160526847
    },
    "arc_easy_rag": {
      "alias": "arc_easy_rag",
      "acc,none": 0.7386363636363636,
      "acc_stderr,none": 0.00901583836660821,
      "acc_norm,none": 0.7129629629629629,
      "acc_norm_stderr,none": 0.009282621598983083
    },
    "boolq_rag": {
      "alias": "boolq_rag",
      "acc,none": 0.7773700305810397,
      "acc_stderr,none": 0.007276093141006338
    },
    "hellaswag_rag": {
      "alias": "hellaswag_rag",
      "acc,none": 0.5746863174666401,
      "acc_stderr,none": 0.004933800927560533,
      "acc_norm,none": 0.7554272057359092,
      "acc_norm_stderr,none": 0.004289551633771993
    },
    "openbookqa_rag": {
      "alias": "openbookqa_rag",
      "acc,none": 0.298,
      "acc_stderr,none": 0.02047511809298897,
      "acc_norm,none": 0.406,
      "acc_norm_stderr,none": 0.021983962090086333
    },
    "piqa_rag": {
      "alias": "piqa_rag",
      "acc,none": 0.7687704026115343,
      "acc_stderr,none": 0.009837063180625326,
      "acc_norm,none": 0.7736670293797606,
      "acc_norm_stderr,none": 0.009763294246879425
    },
    "winogrande_rag": {
      "alias": "winogrande_rag",
      "acc,none": 0.67008681925809,
      "acc_stderr,none": 0.013214432542517548
    }
  },
  "group_subtasks": {
    "arc_challenge_rag": [],
    "arc_easy_rag": [],
    "boolq_rag": [],
    "hellaswag_rag": [],
    "openbookqa_rag": [],
    "piqa_rag": [],
    "winogrande_rag": []
  },
  "configs": {
    "arc_challenge_rag": {
      "task": "arc_challenge_rag",
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Challenge",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fde7cf26290>, doc_to_text_template='Question: {{question}}\\nAnswer:')",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0
      }
    },
    "arc_easy_rag": {
      "task": "arc_easy_rag",
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Easy",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fdc5446cf70>, doc_to_text_template='Question: {{question}}\\nAnswer:')",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0
      }
    },
    "boolq_rag": {
      "task": "boolq_rag",
      "dataset_path": "super_glue",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fdc5446d120>, doc_to_text_template='{{passage}}\\nQuestion: {{question}}?\\nAnswer:')",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "passage",
      "metadata": {
        "version": 2.0
      }
    },
    "hellaswag_rag": {
      "task": "hellaswag_rag",
      "dataset_path": "hellaswag",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fdc34652e60>, question_field='query')",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "openbookqa_rag": {
      "task": "openbookqa_rag",
      "dataset_path": "openbookqa",
      "dataset_name": "main",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fdc3457e710>, question_field='question_stem')",
      "doc_to_target": "{{choices.label.index(answerKey.lstrip())}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "question_stem",
      "metadata": {
        "version": 1.0
      }
    },
    "piqa_rag": {
      "task": "piqa_rag",
      "dataset_path": "piqa",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "functools.partial(<function doc_to_text at 0x7fdb905a3d90>, doc_to_text_template='Question: {{goal}}\\nAnswer:')",
      "doc_to_target": "label",
      "doc_to_choice": "{{[sol1, sol2]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "goal",
      "metadata": {
        "version": 1.0
      }
    },
    "winogrande_rag": {
      "task": "winogrande_rag",
      "dataset_path": "winogrande",
      "dataset_name": "winogrande_xl",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    answer_to_num = {\"1\": 0, \"2\": 1}\n    return answer_to_num[doc[\"answer\"]]\n",
      "doc_to_target": "def doc_to_target(doc):\n    idx = doc[\"sentence\"].index(\"_\") + 1\n    return doc[\"sentence\"][idx:].strip()\n",
      "doc_to_choice": "def winogrande_doc_to_choice(doc):\n    idx = doc[\"sentence\"].index(\"_\")\n    options = [doc[\"option1\"], doc[\"option2\"]]\n    retrieved_contexts = search(doc['sentence'])\n    prompt = prompt_template.format(\n        context='\\n'.join(retrieved_contexts),\n        question='',\n    )\n    return [prompt + doc[\"sentence\"][:idx] + opt for opt in options]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "sentence",
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "arc_challenge_rag": 1.0,
    "arc_easy_rag": 1.0,
    "boolq_rag": 2.0,
    "hellaswag_rag": 1.0,
    "openbookqa_rag": 1.0,
    "piqa_rag": 1.0,
    "winogrande_rag": 1.0
  },
  "n-shot": {
    "arc_challenge_rag": 0,
    "arc_easy_rag": 0,
    "boolq_rag": 0,
    "hellaswag_rag": 0,
    "openbookqa_rag": 0,
    "piqa_rag": 0,
    "winogrande_rag": 0
  },
  "higher_is_better": {
    "arc_challenge_rag": {
      "acc": true,
      "acc_norm": true
    },
    "arc_easy_rag": {
      "acc": true,
      "acc_norm": true
    },
    "boolq_rag": {
      "acc": true
    },
    "hellaswag_rag": {
      "acc": true,
      "acc_norm": true
    },
    "openbookqa_rag": {
      "acc": true,
      "acc_norm": true
    },
    "piqa_rag": {
      "acc": true,
      "acc_norm": true
    },
    "winogrande_rag": {
      "acc": true
    }
  },
  "n-samples": {
    "winogrande_rag": {
      "original": 1267,
      "effective": 1267
    },
    "piqa_rag": {
      "original": 1838,
      "effective": 1838
    },
    "openbookqa_rag": {
      "original": 500,
      "effective": 500
    },
    "hellaswag_rag": {
      "original": 10042,
      "effective": 10042
    },
    "boolq_rag": {
      "original": 3270,
      "effective": 3270
    },
    "arc_easy_rag": {
      "original": 2376,
      "effective": 2376
    },
    "arc_challenge_rag": {
      "original": 1172,
      "effective": 1172
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Llama-2-7b-chat-hf,dtype=bfloat16",
    "model_num_parameters": 6738415616,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "f5db02db724555f92da89c216ac04704f23d4590",
    "batch_size": "16",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "74b69dd",
  "date": 1735334662.2994256,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-5.15.0-122-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.4.131\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H100 80GB HBM3\nNvidia driver version: 550.90.12\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.7\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        46 bits physical, 57 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               30\nOn-line CPU(s) list:                  0-29\nVendor ID:                            GenuineIntel\nModel name:                           Intel(R) Xeon(R) Platinum 8462Y+\nCPU family:                           6\nModel:                                143\nThread(s) per core:                   1\nCore(s) per socket:                   1\nSocket(s):                            30\nStepping:                             8\nBogoMIPS:                             5600.00\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves avx_vnni avx512_bf16 wbnoinvd arat avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b fsrm md_clear serialize tsxldtrk avx512_fp16 arch_capabilities\nVirtualization:                       VT-x\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            960 KiB (30 instances)\nL1i cache:                            960 KiB (30 instances)\nL2 cache:                             120 MiB (30 instances)\nL3 cache:                             480 MiB (30 instances)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-29\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Unknown: No mitigations\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Not affected\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Enhanced / Automatic IBRS; IBPB conditional; RSB filling; PBRSB-eIBRS SW sequence; BHI SW loop, KVM SW loop\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Mitigation; TSX disabled\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==2.0.2\n[pip3] torch==2.5.1\n[pip3] triton==3.1.0\n[conda] Could not collect",
  "transformers_version": "4.47.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<unk>",
    "0"
  ],
  "tokenizer_eos_token": [
    "</s>",
    "2"
  ],
  "tokenizer_bos_token": [
    "<s>",
    "1"
  ],
  "eot_token_id": 2,
  "max_length": 4096,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "meta-llama/Llama-2-7b-chat-hf",
  "model_name_sanitized": "meta-llama__Llama-2-7b-chat-hf",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 8797.874503226,
  "end_time": 14358.492375974,
  "total_evaluation_time_seconds": "5560.617872748"
}